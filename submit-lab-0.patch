diff --git a/user/arraylist.c b/user/arraylist.c
index f78468a..7d54172 100644
--- a/user/arraylist.c
+++ b/user/arraylist.c
@@ -52,7 +52,11 @@ struct arraylist {
 struct arraylist *al_new(void)
 {
   /* TODO: Add your code here. */
-  return 0;
+  struct arraylist* list = malloc(sizeof(struct arraylist));
+  list->size = 0;
+  list->capacity = DEF_ARRAY_LIST_CAPACITY;
+  list->list = malloc(DEF_ARRAY_LIST_CAPACITY * sizeof(int));
+  return list;
 }
 
 /**
@@ -66,6 +70,8 @@ struct arraylist *al_new(void)
 void al_free(struct arraylist *al)
 {
   /* TODO: Add your code here. */
+  free(al->list);
+  free(al);
 }
 
 /**
@@ -81,7 +87,10 @@ void al_free(struct arraylist *al)
 int al_get_at(struct arraylist *al, int pos)
 {
   /* TODO: Add your code here. */
-  return 0;
+  if (pos >= al->size) {
+    return 0xffffffff;
+  }
+  return al->list[pos];
 }
 
 /**
@@ -99,6 +108,14 @@ int al_get_at(struct arraylist *al, int pos)
 void al_resize(struct arraylist *al)
 {
   /* TODO: Add your code here. */
+  int new_capacity = al->capacity * 2;
+  int *new_list = (int*) malloc(new_capacity * sizeof(int));
+  for (int i = 0; i < al->size; i++) {
+    new_list[i] = al->list[i];
+  }
+  free(al->list);
+  al->list = new_list;
+  al->capacity = new_capacity;
 }
 
 /**
@@ -117,6 +134,11 @@ void al_resize(struct arraylist *al)
 void al_append(struct arraylist *al, int val)
 {
   /* TODO: Add your code here. */
+  if (al->size >= al->capacity) {
+    al_resize(al);
+  }
+  al->list[al->size] = val;
+  al->size++;
 }
 
 /**
diff --git a/user/find.c b/user/find.c
index 8f3fe28..ea23f7b 100644
--- a/user/find.c
+++ b/user/find.c
@@ -3,8 +3,89 @@
 #include "kernel/fs.h"
 #include "kernel/stat.h"
 
+char*
+fmtname(char *path)
+{
+  static char buf[DIRSIZ+1];
+  char *p;
+
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  return buf;
+}
+
+void find(char* path, char* target) {
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, 0)) < 0){
+    fprintf(2, "find: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+    fprintf(2, "find: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch(st.type){
+  case T_DEVICE:
+  case T_FILE:
+    if (strcmp(path, target) == 0) {
+    printf("%s\n", path);
+    break;
+    }
+  case T_DIR:
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf("ls: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+    *p++ = '/';
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+      if(de.inum == 0)
+        continue;
+      memmove(p, de.name, DIRSIZ);
+      p[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+        printf("ls: cannot stat %s\n", buf);
+        continue;
+      }
+      if (st.type == T_DIR) {
+        if (strcmp(de.name, ".") == 0 || strcmp(de.name, "..") == 0) {
+          continue;
+        }
+        find(buf, target);
+      }
+      else {
+        if (strcmp(p, target) == 0) {
+          printf("%s\n", buf);
+        }
+      }
+    }
+    break;
+  }
+  close(fd);
+}
+
+
 int main(int argc, char **argv)
 {
+  char* path = argv[1];
+  char* target = argv[2];
   /* TODO: Insert your code here. */
+  find(path, target);
   exit(0);
 }
diff --git a/user/sleep.c b/user/sleep.c
index 14aab29..93c08f9 100644
--- a/user/sleep.c
+++ b/user/sleep.c
@@ -4,6 +4,10 @@
 int main(int argc, char **argv)
 {
   /* TODO: Insert your code here. */
-
+  if (argc == 1) {
+    printf("At least one argument is necessary");
+    exit(1);
+  }
+  sleep(atoi(argv[1]));
   exit(0);
 }
diff --git a/user/warmup.c b/user/warmup.c
index d4d12c0..fb196be 100644
--- a/user/warmup.c
+++ b/user/warmup.c
@@ -32,7 +32,7 @@
 int add_with_pointers(int *val1, int *val2)
 {
   /* TODO: ADD YOUR CODE HERE */
-  return 0;
+  return *val1 + *val2;
 }
 
 void test_add_with_pointers(void)
@@ -53,6 +53,11 @@ void test_add_with_pointers(void)
 void ensure_correct_order(int *should_be_smaller, int *should_be_larger)
 {
   /* TODO: ADD YOUR CODE HERE */
+  if (*should_be_smaller > *should_be_larger) {
+    int temp = *should_be_smaller;
+    *should_be_smaller = *should_be_larger;
+    *should_be_larger = temp;
+  }
 }
 
 void test_ensure_correct_order(void)
@@ -82,6 +87,12 @@ void test_ensure_correct_order(void)
 int special_equals(int *val1, int *val2)
 {
   /* TODO: ADD YOUR CODE HERE */
+  if (val1 == val2) {
+    return 2;
+  }
+  if (*val1 == *val2) {
+    return 1;
+  }
   return 0;
 }
 
@@ -121,6 +132,19 @@ void test_special_equals(void)
 void string_with_q(char *s1, char *s2, char **output)
 {
   /* TODO: ADD YOUR CODE HERE */
+  int i = 0;
+  while (s1[i] != '\0') {
+    if (s1[i] == 'Q') {
+      *output = s1;
+      return;
+    }
+    else if (s2[i] == 'Q') {
+      *output = s2;
+      return;
+    }
+    i++;
+  }
+  *output = 0;
 }
 
 void test_string_with_q(void)
